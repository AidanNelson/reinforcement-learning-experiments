{"id":"node_modules/vega-lite/build/src/sort.js","dependencies":[{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/vega-lite/build/src/sort.js.map","includedInParent":true,"mtime":1550250389035},{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/package.json","includedInParent":true,"mtime":1552668533660},{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/.babelrc","includedInParent":true,"mtime":1550250231081},{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":1550250389035},{"name":"vega-util","loc":{"line":1,"column":24},"parent":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/vega-lite/build/src/sort.js","resolved":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/vega-util/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSortField = isSortField;\nexports.isSortArray = isSortArray;\n\nvar _vegaUtil = require(\"vega-util\");\n\nfunction isSortField(sort) {\n  return !!sort && (sort['op'] === 'count' || !!sort['field']) && !!sort['op'];\n}\n\nfunction isSortArray(sort) {\n  return !!sort && (0, _vegaUtil.isArray)(sort);\n}","map":{"mappings":[{"source":"../../src/sort.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":9,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":11,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":11,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":11,"column":20}},{"source":"../../src/sort.ts","name":null,"original":{"line":51,"column":31},"generated":{"line":11,"column":21}},{"source":"../../src/sort.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":11,"column":25}},{"source":"../../src/sort.ts","name":null,"original":{"line":51,"column":44},"generated":{"line":11,"column":27}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":12,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":9},"generated":{"line":12,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":10},"generated":{"line":12,"column":10}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":11},"generated":{"line":12,"column":11}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":9},"generated":{"line":12,"column":15}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":20},"generated":{"line":12,"column":20}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":24},"generated":{"line":12,"column":24}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":25},"generated":{"line":12,"column":25}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":24},"generated":{"line":12,"column":29}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":20},"generated":{"line":12,"column":30}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":35},"generated":{"line":12,"column":35}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":20},"generated":{"line":12,"column":42}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":46},"generated":{"line":12,"column":46}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":47},"generated":{"line":12,"column":47}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":48},"generated":{"line":12,"column":48}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":52},"generated":{"line":12,"column":52}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":53},"generated":{"line":12,"column":53}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":52},"generated":{"line":12,"column":60}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":9},"generated":{"line":12,"column":61}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":66},"generated":{"line":12,"column":66}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":67},"generated":{"line":12,"column":67}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":68},"generated":{"line":12,"column":68}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":72},"generated":{"line":12,"column":72}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":73},"generated":{"line":12,"column":73}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":72},"generated":{"line":12,"column":77}},{"source":"../../src/sort.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":12,"column":78}},{"source":"../../src/sort.ts","name":null,"original":{"line":53,"column":1},"generated":{"line":13,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":55,"column":6},"generated":{"line":15,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":55,"column":16},"generated":{"line":15,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":55,"column":6},"generated":{"line":15,"column":20}},{"source":"../../src/sort.ts","name":null,"original":{"line":55,"column":31},"generated":{"line":15,"column":21}},{"source":"../../src/sort.ts","name":null,"original":{"line":55,"column":6},"generated":{"line":15,"column":25}},{"source":"../../src/sort.ts","name":null,"original":{"line":55,"column":44},"generated":{"line":15,"column":27}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":16,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":16,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":10},"generated":{"line":16,"column":10}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":11},"generated":{"line":16,"column":11}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":16,"column":15}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":19},"generated":{"line":16,"column":19}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":27},"generated":{"line":16,"column":42}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":19},"generated":{"line":16,"column":46}},{"source":"../../src/sort.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":16,"column":47}},{"source":"../../src/sort.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":0}}],"sources":{"../../src/sort.ts":"import {AggregateOp} from 'vega';\nimport {isArray} from 'vega-util';\nimport {DateTime} from './datetime';\nimport {VgComparatorOrder} from './vega.schema';\n\nexport type SortOrder = VgComparatorOrder | null;\n\n/**\n * A sort definition for transform\n */\nexport interface SortField {\n  /**\n   * The name of the field to sort.\n   */\n  field: string;\n\n  /**\n   * Whether to sort the field in ascending or descending order.\n   */\n  order?: VgComparatorOrder;\n}\n\n/**\n * A sort definition for sorting a discrete scale in an encoding field definition.\n */\n\nexport interface EncodingSortField<F> {\n  /**\n   * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.\n   *\n   * __Default value:__ If unspecified, defaults to the field specified in the outer data reference.\n   */\n  field?: F;\n  /**\n   * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `\"count\"`, `\"mean\"` and `\"median\"`).\n   * This property is required in cases where the sort field and the data reference field do not match.\n   * The input data objects will be aggregated, grouped by the encoded data field.\n   *\n   * For a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\n   */\n  op: AggregateOp;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder;\n}\n\nexport type Sort<F> = number[] | string[] | boolean[] | DateTime[] | SortOrder | EncodingSortField<F> | null;\n\nexport function isSortField<F>(sort: Sort<F>): sort is EncodingSortField<F> {\n  return !!sort && (sort['op'] === 'count' || !!sort['field']) && !!sort['op'];\n}\n\nexport function isSortArray<F>(sort: Sort<F>): sort is number[] | string[] | boolean[] | DateTime[] {\n  return !!sort && isArray(sort);\n}\n"},"lineCount":null}},"hash":"a80ca80ff0b5dae4f4dc0dc9580bb9a7","cacheData":{"env":{}}}