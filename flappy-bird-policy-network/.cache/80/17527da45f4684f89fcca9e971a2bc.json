{"id":"node_modules/jsonify/lib/stringify.js","dependencies":[{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/package.json","includedInParent":true,"mtime":1552668533660},{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/.babelrc","includedInParent":true,"mtime":1550250231081},{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/jsonify/package.json","includedInParent":true,"mtime":1550250390429}],"generated":{"js":"var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n","map":{"mappings":[{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}}],"sources":{"node_modules/jsonify/lib/stringify.js":"var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n"},"lineCount":155}},"hash":"87a57600ecc2ecd85ef2248428a8d2e6","cacheData":{"env":{}}}