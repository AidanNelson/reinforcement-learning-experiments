{"id":"node_modules/@tensorflow/tfjs-vis/dist/util/math.js","dependencies":[{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/@tensorflow/tfjs-vis/dist/util/math.js.map","includedInParent":true,"mtime":1550250388843},{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/package.json","includedInParent":true,"mtime":1552668533660},{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/.babelrc","includedInParent":true,"mtime":1550250231081},{"name":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/@tensorflow/tfjs-vis/package.json","includedInParent":true,"mtime":1550250388843},{"name":"@tensorflow/tfjs","loc":{"line":11,"column":23},"parent":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/@tensorflow/tfjs-vis/dist/util/math.js","resolved":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/@tensorflow/tfjs/dist/tf.esm.js"},{"name":"./utils","loc":{"line":12,"column":24},"parent":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/@tensorflow/tfjs-vis/dist/util/math.js","resolved":"/Users/aidannelson/projects/machine-learning/ml5js/reinforcement-learning/experiments/tfjs-examples/cart-pole/node_modules/@tensorflow/tfjs-vis/dist/util/utils.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tfjs_1 = require(\"@tensorflow/tfjs\");\nconst utils_1 = require(\"./utils\");\nfunction arrayStats(input) {\n    if (!Array.isArray(input)) {\n        throw new Error('input must be an array');\n    }\n    if (input.length === 0) {\n        return {\n            numVals: 0,\n            numNans: 0,\n            numZeros: 0,\n            max: undefined,\n            min: undefined,\n        };\n    }\n    const numVals = input.length;\n    let max = -Infinity;\n    let min = Infinity;\n    let numZeros = 0;\n    let numNans = 0;\n    let numInfs = 0;\n    for (let i = 0; i < numVals; i++) {\n        const curr = input[i];\n        if (curr > max) {\n            max = curr;\n        }\n        if (curr < min) {\n            min = curr;\n        }\n        if (curr === 0) {\n            numZeros += 1;\n        }\n        if (isNaN(curr)) {\n            numNans += 1;\n        }\n        else if (!isFinite(curr)) {\n            numInfs += 1;\n        }\n    }\n    const result = {\n        numVals,\n        numZeros,\n        numNans,\n        max,\n        min,\n        numInfs,\n    };\n    if (result.max === -Infinity) {\n        result.max = NaN;\n    }\n    if (result.min === Infinity) {\n        result.min = NaN;\n    }\n    return result;\n}\nexports.arrayStats = arrayStats;\nfunction tensorStats(input) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [min, max, numZeros] = tfjs_1.tidy(() => {\n            const zero = tfjs_1.scalar(0, input.dtype);\n            const min = input.min();\n            const max = input.max();\n            const numZeros = input.equal(zero).sum();\n            return [min, max, numZeros];\n        });\n        return yield Promise\n            .all([input.data(), min.data(), max.data(), numZeros.data()])\n            .then(([tensorVal, minVal, maxVal, numZerosVal]) => {\n            const numVals = tensorVal.length;\n            let numNans = 0;\n            let numInfs = 0;\n            for (let i = 0; i < numVals; i++) {\n                const curr = tensorVal[i];\n                if (isNaN(curr)) {\n                    numNans += 1;\n                }\n                else if (!isFinite(curr)) {\n                    numInfs += 1;\n                }\n            }\n            let trueMin = minVal[0];\n            let trueMax = maxVal[0];\n            if (numNans === numVals) {\n                trueMin = NaN;\n                trueMax = NaN;\n            }\n            const stats = {\n                numVals,\n                numZeros: numZerosVal[0],\n                numNans,\n                min: trueMin,\n                max: trueMax,\n                numInfs,\n            };\n            return stats;\n        });\n    });\n}\nexports.tensorStats = tensorStats;\nfunction confusionMatrix(labels, predictions, numClasses, weights) {\n    return __awaiter(this, void 0, void 0, function* () {\n        utils_1.assert(labels.rank === 1, 'labels must be a 1D tensor');\n        utils_1.assert(predictions.rank === 1, 'predictions must be a 1D tensor');\n        utils_1.assert(labels.size === predictions.size, 'labels and predictions must be the same length');\n        if (weights != null) {\n            utils_1.assert(weights.size === predictions.size, 'labels and predictions must be the same length');\n        }\n        const labelsInt = labels.cast('int32');\n        const predictionsInt = predictions.cast('int32');\n        if (numClasses == null) {\n            numClasses =\n                tfjs_1.tidy(() => {\n                    const max = tfjs_1.maximum(labelsInt.max(), predictionsInt.max()).cast('int32');\n                    return max.dataSync()[0] + 1;\n                });\n        }\n        let weightsPromise = Promise.resolve(null);\n        if (weights != null) {\n            weightsPromise = weights.data();\n        }\n        return Promise.all([labelsInt.data(), predictionsInt.data(), weightsPromise])\n            .then(([labelsArray, predsArray, weightsArray]) => {\n            const result = Array(numClasses).fill(0);\n            for (let i = 0; i < numClasses; i++) {\n                result[i] = Array(numClasses).fill(0);\n            }\n            for (let i = 0; i < labelsArray.length; i++) {\n                const label = labelsArray[i];\n                const pred = predsArray[i];\n                if (weightsArray != null) {\n                    result[label][pred] += weightsArray[i];\n                }\n                else {\n                    result[label][pred] += 1;\n                }\n            }\n            return result;\n        });\n    });\n}\nexports.confusionMatrix = confusionMatrix;\nfunction accuracy(labels, predictions) {\n    return __awaiter(this, void 0, void 0, function* () {\n        utils_1.assertShapesMatch(labels.shape, predictions.shape, 'Error computing accuracy.');\n        const eq = labels.equal(predictions);\n        const mean = eq.mean();\n        const acc = (yield mean.data())[0];\n        tfjs_1.dispose([eq, mean]);\n        return acc;\n    });\n}\nexports.accuracy = accuracy;\nfunction perClassAccuracy(labels, predictions, numClasses) {\n    return __awaiter(this, void 0, void 0, function* () {\n        utils_1.assert(labels.rank === 1, 'labels must be a 1D tensor');\n        utils_1.assert(predictions.rank === 1, 'predictions must be a 1D tensor');\n        utils_1.assert(labels.size === predictions.size, 'labels and predictions must be the same length');\n        if (numClasses == null) {\n            numClasses = tfjs_1.tidy(() => {\n                return tfjs_1.maximum(labels.max(), predictions.max()).dataSync()[0] + 1;\n            });\n        }\n        return Promise.all([labels.data(), predictions.data()])\n            .then(([labelsArray, predsArray]) => {\n            const counts = Array(numClasses).fill(0);\n            const accuracy = Array(numClasses).fill(0);\n            for (let i = 0; i < labelsArray.length; i++) {\n                const label = labelsArray[i];\n                const pred = predsArray[i];\n                counts[label] += 1;\n                if (label === pred) {\n                    accuracy[label] += 1;\n                }\n            }\n            const results = [];\n            for (let i = 0; i < counts.length; i++) {\n                results.push({\n                    count: counts[i],\n                    accuracy: counts[i] === 0 ? 0 : accuracy[i] / counts[i],\n                });\n            }\n            return results;\n        });\n    });\n}\nexports.perClassAccuracy = perClassAccuracy;\n","map":{"version":3,"file":"math.js","sourceRoot":"","sources":["../../src/util/math.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"hash":"daeab1d16c23996a462b654b93983b01","cacheData":{"env":{}}}